{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction\n",
    "This tutorial will introduce you to some basic methods for doing learning analytics, particularly focusing on using different sources of data about students to predict their outcomes to fins at-risk students earlier. \n",
    "\n",
    "The field of Education is rich of data, but putting them into data science has a short history. Learning analytics is an emerging field of data science in Education. They aim at utilizing big data methods to give institutions and individuals the power to augment student performance [1]. Advances in modern software technology allow us to capture a complex number of specific user actions [2] to get closer to students' academic performance. Based on these results, insturctors can also ajust their instructional contents, sequences and activities.\n",
    "\n",
    "\n",
    "This could include early identification of at-risk students so that timely interventions can be designed for these students to support them in improving their academic performance and overall instituteâ€™s retention rate . Another application is prediction of studentsâ€™ dropout, as increased dropout rate is a potential \n",
    "\n",
    "##### A practical exampleâ€”â€”OnTask: https://www.ontasklearning.org/\n",
    "A tool that gathers and assesses data about studentâ€™s activities throughout the semester and allows instructors to design personalised feedback with suggestions about their learning strategies.\n",
    "\n",
    "<img style=\"float: middle;\" src=\"ontask.png\" width=\"50%\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tutorial content\n",
    "In this tutorial, we will show how to do some basic learning analysis in Python, specifically using [pandas](https://pandas.pydata.org/), [sklearn](https://scikit-learn.org/), and [surprise](https://surprise.readthedocs.io/en/stable/).\n",
    "\n",
    "We'll be using data from [Open University Learning Analytics dataset](https://analyse.kmi.open.ac.uk/#open-dataset)\n",
    "\n",
    "We will cover the following topics in this tutorial:\n",
    "0.OULAD Dataset<br/> \n",
    "1.Load data<br/>\n",
    "2.Initial Data Exploration<br/>\n",
    "2.Predictive models<br/>\n",
    "    3.1.Build Predictive models based on Demographic Data<br/>\n",
    "    3.2 Build Weekly Predictive models based on Demographic Data and Assessment data<br/>\n",
    "    3.3 Build Weekly Predictive models based on Demographic Data and Assessment data<br/>\n",
    "5.Example application\n",
    "\n",
    "After completing this tutorial, you will know:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 0. OULAD Dataset \n",
    "We've installed and loaded the libraries, let's know more about our dataset now! <br/>\n",
    "OULAD dataset contains data about courses, students and their interactions with Virtual Learning Environment (VLE) for seven selected courses (called modules). Presentations of courses start in February and October - they are marked by â€œBâ€ and â€œJâ€ respectively. The dataset consists of tables connected using unique identifiers. All tables are stored in the csv format.[3]<br/>\n",
    "Firstly, please download the `anonymisedData.zip` file from the [Open University Learning Analytics dataset].(https://analyse.kmi.open.ac.uk/#open-dataset)<br/>\n",
    "Then, unzip the `anonymisedData.zip` file, and create a `OULAD` folder with 7 csv files inside. We can know detailed infomation and their relationships from the Database schema below.<br/>\n",
    "You can see from the schema that OULAD put different infomation into sub-datasets and connect them with different IDs. <br/>\n",
    "\n",
    "<img style=\"float: middle;\" src=\"model.png\" width=\"60%\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Load Data\n",
    "This time, we want to use the data of 2013 to build the prediction model, and use that model to predict students' activities in the next year (That what educators want in real situations). If you're interested, you can use other subsets of course data, but we chose a subset of the available courses (`code_module=\"BBB\"`, `code_presentation=\"2013B\"` and `\"2014B\"`) for the purposes of this tutorial.<br/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>code_module</th>\n",
       "      <th>code_presentation</th>\n",
       "      <th>module_presentation_length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AAA</td>\n",
       "      <td>2013J</td>\n",
       "      <td>268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AAA</td>\n",
       "      <td>2014J</td>\n",
       "      <td>269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013J</td>\n",
       "      <td>268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2014J</td>\n",
       "      <td>262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>240</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  code_module code_presentation  module_presentation_length\n",
       "0         AAA             2013J                         268\n",
       "1         AAA             2014J                         269\n",
       "2         BBB             2013J                         268\n",
       "3         BBB             2014J                         262\n",
       "4         BBB             2013B                         240"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "course = pd.read_csv('OULAD/courses.csv')\n",
    "stu_demo = pd.read_csv('OULAD/studentInfo.csv')\n",
    "stu_ass = pd.read_csv('OULAD/studentAssessment.csv')\n",
    "stu_Vle = pd.read_csv('OULAD/studentVle.csv')\n",
    "Vle = pd.read_csv('OULAD/vle.csv')\n",
    "assessment = pd.read_csv('OULAD/assessments.csv')\n",
    "stu_regis = pd.read_csv('OULAD/studentRegistration.csv')\n",
    "course.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we already knew the code_module and code_presentation we need, we can get students' demographic data `stu_demo_BB` from `studentInfo`. Now you can see students' final outcomes from `final_result`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>code_module</th>\n",
       "      <th>code_presentation</th>\n",
       "      <th>id_student</th>\n",
       "      <th>gender</th>\n",
       "      <th>region</th>\n",
       "      <th>highest_education</th>\n",
       "      <th>imd_band</th>\n",
       "      <th>age_band</th>\n",
       "      <th>num_of_prev_attempts</th>\n",
       "      <th>studied_credits</th>\n",
       "      <th>disability</th>\n",
       "      <th>final_result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>748</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>23629</td>\n",
       "      <td>F</td>\n",
       "      <td>East Anglian Region</td>\n",
       "      <td>Lower Than A Level</td>\n",
       "      <td>20-30%</td>\n",
       "      <td>0-35</td>\n",
       "      <td>2</td>\n",
       "      <td>60</td>\n",
       "      <td>N</td>\n",
       "      <td>Fail</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>749</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>25107</td>\n",
       "      <td>F</td>\n",
       "      <td>East Anglian Region</td>\n",
       "      <td>Lower Than A Level</td>\n",
       "      <td>20-30%</td>\n",
       "      <td>0-35</td>\n",
       "      <td>0</td>\n",
       "      <td>120</td>\n",
       "      <td>N</td>\n",
       "      <td>Pass</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>750</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>27891</td>\n",
       "      <td>M</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>Lower Than A Level</td>\n",
       "      <td>0-10%</td>\n",
       "      <td>0-35</td>\n",
       "      <td>2</td>\n",
       "      <td>120</td>\n",
       "      <td>Y</td>\n",
       "      <td>Withdrawn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>751</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>29144</td>\n",
       "      <td>M</td>\n",
       "      <td>South Region</td>\n",
       "      <td>Lower Than A Level</td>\n",
       "      <td>60-70%</td>\n",
       "      <td>0-35</td>\n",
       "      <td>0</td>\n",
       "      <td>120</td>\n",
       "      <td>N</td>\n",
       "      <td>Fail</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>752</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>31663</td>\n",
       "      <td>M</td>\n",
       "      <td>North Region</td>\n",
       "      <td>A Level or Equivalent</td>\n",
       "      <td>30-40%</td>\n",
       "      <td>35-55</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>N</td>\n",
       "      <td>Pass</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    code_module code_presentation  id_student gender               region  \\\n",
       "748         BBB             2013B       23629      F  East Anglian Region   \n",
       "749         BBB             2013B       25107      F  East Anglian Region   \n",
       "750         BBB             2013B       27891      M             Scotland   \n",
       "751         BBB             2013B       29144      M         South Region   \n",
       "752         BBB             2013B       31663      M         North Region   \n",
       "\n",
       "         highest_education imd_band age_band  num_of_prev_attempts  \\\n",
       "748     Lower Than A Level   20-30%     0-35                     2   \n",
       "749     Lower Than A Level   20-30%     0-35                     0   \n",
       "750     Lower Than A Level    0-10%     0-35                     2   \n",
       "751     Lower Than A Level   60-70%     0-35                     0   \n",
       "752  A Level or Equivalent   30-40%    35-55                     0   \n",
       "\n",
       "     studied_credits disability final_result  \n",
       "748               60          N         Fail  \n",
       "749              120          N         Pass  \n",
       "750              120          Y    Withdrawn  \n",
       "751              120          N         Fail  \n",
       "752               60          N         Pass  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stu_demo_B=stu_demo.loc[stu_demo['code_module']=='BBB',]\n",
    "stu_demo_BB=stu_demo_B[(stu_demo_B['code_presentation']=='2013B')|(stu_demo_B['code_presentation']=='2014B')].dropna()\n",
    "stu_demo_BB.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we can use `.unique()` to see the values in `final_result`. And there are four unique values. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Fail', 'Pass', 'Withdrawn', 'Distinction'], dtype=object)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stu_demo_BB['final_result'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "However, the pain point for prediction of students' course outcome is to know whether the student can pass the module or notï¼Œin other words, predicting â€˜at-riskâ€™ and â€˜not-at-riskâ€™ students. <br/>\n",
    "To achieve this, we build a new column `pass_not` to divide the final result into two classes. Those students whose final result is Fail or withdrawal are considered as â€˜at-riskâ€™ of failing the course. That is to say, ` ['final_result']==\"Fail\" | \"Withdrawn\" = 1` and `['final_result']==\"Pass\"| \"Distinction\" = 0`. We can do this using the `.apply()` command:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>code_module</th>\n",
       "      <th>code_presentation</th>\n",
       "      <th>id_student</th>\n",
       "      <th>gender</th>\n",
       "      <th>region</th>\n",
       "      <th>highest_education</th>\n",
       "      <th>imd_band</th>\n",
       "      <th>age_band</th>\n",
       "      <th>num_of_prev_attempts</th>\n",
       "      <th>studied_credits</th>\n",
       "      <th>disability</th>\n",
       "      <th>final_result</th>\n",
       "      <th>pass_not</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>748</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>23629</td>\n",
       "      <td>F</td>\n",
       "      <td>East Anglian Region</td>\n",
       "      <td>Lower Than A Level</td>\n",
       "      <td>20-30%</td>\n",
       "      <td>0-35</td>\n",
       "      <td>2</td>\n",
       "      <td>60</td>\n",
       "      <td>N</td>\n",
       "      <td>Fail</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>749</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>25107</td>\n",
       "      <td>F</td>\n",
       "      <td>East Anglian Region</td>\n",
       "      <td>Lower Than A Level</td>\n",
       "      <td>20-30%</td>\n",
       "      <td>0-35</td>\n",
       "      <td>0</td>\n",
       "      <td>120</td>\n",
       "      <td>N</td>\n",
       "      <td>Pass</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>750</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>27891</td>\n",
       "      <td>M</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>Lower Than A Level</td>\n",
       "      <td>0-10%</td>\n",
       "      <td>0-35</td>\n",
       "      <td>2</td>\n",
       "      <td>120</td>\n",
       "      <td>Y</td>\n",
       "      <td>Withdrawn</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>751</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>29144</td>\n",
       "      <td>M</td>\n",
       "      <td>South Region</td>\n",
       "      <td>Lower Than A Level</td>\n",
       "      <td>60-70%</td>\n",
       "      <td>0-35</td>\n",
       "      <td>0</td>\n",
       "      <td>120</td>\n",
       "      <td>N</td>\n",
       "      <td>Fail</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>752</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>31663</td>\n",
       "      <td>M</td>\n",
       "      <td>North Region</td>\n",
       "      <td>A Level or Equivalent</td>\n",
       "      <td>30-40%</td>\n",
       "      <td>35-55</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>N</td>\n",
       "      <td>Pass</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    code_module code_presentation  id_student gender               region  \\\n",
       "748         BBB             2013B       23629      F  East Anglian Region   \n",
       "749         BBB             2013B       25107      F  East Anglian Region   \n",
       "750         BBB             2013B       27891      M             Scotland   \n",
       "751         BBB             2013B       29144      M         South Region   \n",
       "752         BBB             2013B       31663      M         North Region   \n",
       "\n",
       "         highest_education imd_band age_band  num_of_prev_attempts  \\\n",
       "748     Lower Than A Level   20-30%     0-35                     2   \n",
       "749     Lower Than A Level   20-30%     0-35                     0   \n",
       "750     Lower Than A Level    0-10%     0-35                     2   \n",
       "751     Lower Than A Level   60-70%     0-35                     0   \n",
       "752  A Level or Equivalent   30-40%    35-55                     0   \n",
       "\n",
       "     studied_credits disability final_result  pass_not  \n",
       "748               60          N         Fail         1  \n",
       "749              120          N         Pass         0  \n",
       "750              120          Y    Withdrawn         1  \n",
       "751              120          N         Fail         1  \n",
       "752               60          N         Pass         0  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stu_demo_BB['pass_not'] = stu_demo_BB.final_result.apply(lambda x: 0 if x == \"Pass\" or x == \"Distinction\" else 1)\n",
    "# Whether to drop labels from the index (0 or 'index') or columns (1 or 'columns')\n",
    "stu_demo_BB.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Initial data exploration\n",
    "Some graphs below are showing the fundamental sircumstance "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>code_presentation</th>\n",
       "      <th>2013B</th>\n",
       "      <th>2014B</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pass_not</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>787</td>\n",
       "      <td>717</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>959</td>\n",
       "      <td>883</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "code_presentation  2013B  2014B\n",
       "pass_not                       \n",
       "0                    787    717\n",
       "1                    959    883"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tab = pd.crosstab(stu_demo_BB['pass_not'], stu_demo_BB['code_presentation'])\n",
    "tab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x936 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "all_fig = plt.figure(num = \"all plots\", figsize = (13, 13))\n",
    "all_fig.subplots_adjust(wspace = 10, hspace = 10)\n",
    "ax1 = all_fig.add_subplot(2, 2, 1)\n",
    "ax2 = all_fig.add_subplot(2, 2, 2)\n",
    "ax3 = all_fig.add_subplot(2, 2, 3)\n",
    "ax4 = all_fig.add_subplot(2, 2, 4)\n",
    "\n",
    "lst=[('gender',ax1),('highest_education',ax2),('imd_band',ax3),('disability',ax4)]\n",
    "for i,j in lst:\n",
    "    labels = stu_demo_BB[i].unique().tolist()\n",
    "    plt.subplots_adjust(hspace=0.3, wspace=0.3)\n",
    "    x = np.arange(len(labels))\n",
    "    pass_n =stu_demo_BB[(stu_demo_BB['pass_not']==1)].groupby([i]).count()[\"pass_not\"]\n",
    "    pass_y =stu_demo_BB[(stu_demo_BB['pass_not']==0)].groupby([i]).count()[\"pass_not\"]\n",
    "    width = 0.3\n",
    "    j.set_ylabel('Num')\n",
    "    j.set_title(\"Students' Outcome By {}\".format(i))\n",
    "    j.set_xticks(x)\n",
    "    j.set_xticklabels(labels)\n",
    "    j.tick_params(axis=\"x\", labelsize=6.5)\n",
    "    rects1 = j.bar(x - width/2, pass_n, width, label='Fail')\n",
    "    rects2 = j.bar(x + width/2, pass_y, width, label='Pass')\n",
    "    j.legend(loc='upper right')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3 Prediction of Students' Outcomes\n",
    "In the area of machine learning, classification is a type of supervised learning in which algorithm learns from training data; given as an input and classify new â€˜unseenâ€™ data into classes.\n",
    "Training data comprises of set of features (attributes) with their values and one of the attributes is known as class. The performance of the learning algorithms is measured by different methods some of them are Kappa coefficient, F1-score, AUC (area under curve), accuracy etc.[6]<br/> \n",
    "\n",
    "In this section, we will build our predictive models using three common classification methods: [Decision Tree](https://scikit-learn.org/stable/modules/tree.html#classification), [Random Forest](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html), and [K-NN](https://scikit-learn.org/stable/modules/neighbors.html#nearest-neighbors-classification).\n",
    "\n",
    "`Scikit-learn` is a increasingly popular machine learning library that integrates wide range of algorithms for supervised, unsupervised and semi-supervised problems. This library provides a user-friendly environment for non-experts in machine learning and reusable in different scientific platforms.<br/> \n",
    "\n",
    "Specifically, we will use  `DecisionTreeClassifier`, `RandomForestClassifier`, `KNeighborsClassifier`, and `LinearDiscriminantAnalysis` in this tutorial. For training and testing data, as we said before, we will use data of BBB-2013B as training set and BBB-2014B as test set."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.1 Prediction models based on Demographic Data\n",
    "In [Section 1](#1.-Load-Data) we have already divided students' outcomes into two classes: â€˜at-riskâ€™ and â€˜not-at-riskâ€™. <br/>\n",
    "However, Scikit-learn requires two arrays as input: an array X, sparse or dense, of size [n_samples, n_features] holding the training samples, and an array Y of integer values, size [n_samples], holding the class labels for the training samples.<br/>\n",
    "So before building our models, we need to:\n",
    "1. convert our feature types by using `LabelEncoder` and `.map()`.\n",
    "2. change  datafreames to arrays by using `.values`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import preprocessing\n",
    "from sklearn.preprocessing import LabelEncoder"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Firstly, let's see the values of each features by using `.unique()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Lower Than A Level', 'A Level or Equivalent', 'HE Qualification',\n",
       "       'Post Graduate Qualification', 'No Formal quals'], dtype=object)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stu_demo_BB['highest_education'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['0-35', '35-55', '55<='], dtype=object)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stu_demo_BB['age_band'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['20-30%', '0-10%', '60-70%', '30-40%', '10-20', '70-80%', '50-60%',\n",
       "       '40-50%', '80-90%', '90-100%'], dtype=object)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stu_demo_BB['imd_band'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can create [dummy variables](https://www.ritchieng.com/pandas-creating-dummy-variables/) using `.map`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "edu_mapping = {'No Formal quals':0,'Lower Than A Level':1, 'A Level or Equivalent':2, 'HE Qualification':3,\n",
    "       'Post Graduate Qualification':4}\n",
    "age_mapping = {'0-35':0, '35-55':1, '55<=':2}\n",
    "imd_mapping = {'20-30%':0, '0-10%':1, '10-20':2,'30-40%':3,'40-50%':4,'50-60%':5,'60-70%':6,'70-80%':7,'80-90%':8, '90-100%':9}\n",
    "stu_demo_BB['highest_education'] = stu_demo_BB['highest_education'].map(edu_mapping)\n",
    "stu_demo_BB['imd_band'] = stu_demo_BB['imd_band'].map(imd_mapping)\n",
    "stu_demo_BB['age_band'] = stu_demo_BB['age_band'].map(age_mapping)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>code_module</th>\n",
       "      <th>code_presentation</th>\n",
       "      <th>id_student</th>\n",
       "      <th>gender</th>\n",
       "      <th>region</th>\n",
       "      <th>highest_education</th>\n",
       "      <th>imd_band</th>\n",
       "      <th>age_band</th>\n",
       "      <th>num_of_prev_attempts</th>\n",
       "      <th>studied_credits</th>\n",
       "      <th>disability</th>\n",
       "      <th>final_result</th>\n",
       "      <th>pass_not</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>748</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>23629</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>Fail</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>749</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>25107</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>120</td>\n",
       "      <td>0</td>\n",
       "      <td>Pass</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>750</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>27891</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>120</td>\n",
       "      <td>1</td>\n",
       "      <td>Withdrawn</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>751</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>29144</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>120</td>\n",
       "      <td>0</td>\n",
       "      <td>Fail</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>752</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>31663</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>Pass</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    code_module code_presentation  id_student  gender  region  \\\n",
       "748         BBB             2013B       23629       0       0   \n",
       "749         BBB             2013B       25107       0       0   \n",
       "750         BBB             2013B       27891       1       6   \n",
       "751         BBB             2013B       29144       1       8   \n",
       "752         BBB             2013B       31663       1       4   \n",
       "\n",
       "     highest_education  imd_band  age_band  num_of_prev_attempts  \\\n",
       "748                  1         0         0                     2   \n",
       "749                  1         0         0                     0   \n",
       "750                  1         1         0                     2   \n",
       "751                  1         6         0                     0   \n",
       "752                  2         3         1                     0   \n",
       "\n",
       "     studied_credits  disability final_result  pass_not  \n",
       "748               60           0         Fail         1  \n",
       "749              120           0         Pass         0  \n",
       "750              120           1    Withdrawn         1  \n",
       "751              120           0         Fail         1  \n",
       "752               60           0         Pass         0  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "le = preprocessing.LabelEncoder()\n",
    "stu_demo_BB['gender'] = le.fit_transform(stu_demo_BB['gender'])\n",
    "stu_demo_BB['disability'] = le.fit_transform(stu_demo_BB['disability'])\n",
    "stu_demo_BB['region'] = le.fit_transform(stu_demo_BB['region'])\n",
    "stu_demo_BB.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now the dataset meet the requirements. So it's time to build the first prediction model and check the prediction results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier as DTree\n",
    "from sklearn.ensemble import RandomForestClassifier as RF\n",
    "from sklearn.neighbors import KNeighborsClassifier as KNN\n",
    "\n",
    "X_train=stu_demo_BB.loc[stu_demo['code_presentation']=='2013B',][['gender','region','highest_education','imd_band','age_band','num_of_prev_attempts','studied_credits','disability']].values\n",
    "X_test=stu_demo_BB.loc[stu_demo['code_presentation']=='2014B',][['gender','region','highest_education','imd_band','age_band','num_of_prev_attempts','studied_credits','disability']].values\n",
    "y_train=stu_demo_BB.loc[stu_demo['code_presentation']=='2013B',][['pass_not']].values.ravel()\n",
    "y_test=stu_demo_BB.loc[stu_demo['code_presentation']=='2014B',][['pass_not']].values.ravel()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can define a function to put different classification into it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_clf(X_train,X_test,y_train,class_type,**kwargs):\n",
    "    clf = class_type(**kwargs)\n",
    "    clf.fit(X_train,y_train)  \n",
    "    y_pred = clf.predict(X_test)\n",
    "    return y_pred\n",
    "\n",
    "def run_RF(X_train,X_test,y_train,RF):\n",
    "    clf=RF(n_estimators=100)\n",
    "    clf.fit(X_train,y_train)  \n",
    "    y_pred = clf.predict(X_test)\n",
    "    return y_pred"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we can use [`classification_report`](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html) and `recall_score` to evaluate Classification Models. <br/>\n",
    "`target_name` here is used to show the main classification metrics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DecisionTree\n",
      "                     precision    recall  f1-score   support\n",
      "\n",
      "Pass or Distinction       0.87      0.74      0.80       716\n",
      "  Fail or Withdrawn       0.67      0.83      0.74       458\n",
      "\n",
      "          micro avg       0.77      0.77      0.77      1174\n",
      "          macro avg       0.77      0.78      0.77      1174\n",
      "       weighted avg       0.79      0.77      0.78      1174\n",
      "\n",
      "K-NN\n",
      "                     precision    recall  f1-score   support\n",
      "\n",
      "Pass or Distinction       0.80      0.85      0.82       716\n",
      "  Fail or Withdrawn       0.73      0.66      0.70       458\n",
      "\n",
      "          micro avg       0.78      0.78      0.78      1174\n",
      "          macro avg       0.77      0.76      0.76      1174\n",
      "       weighted avg       0.77      0.78      0.77      1174\n",
      "\n",
      "Randomforest\n",
      "                     precision    recall  f1-score   support\n",
      "\n",
      "Pass or Distinction       0.89      0.90      0.89       716\n",
      "  Fail or Withdrawn       0.84      0.82      0.83       458\n",
      "\n",
      "          micro avg       0.87      0.87      0.87      1174\n",
      "          macro avg       0.87      0.86      0.86      1174\n",
      "       weighted avg       0.87      0.87      0.87      1174\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report as cls_rep\n",
    "target_names=[\"Pass or Distinction\",\"Fail or Withdrawn\"]\n",
    "i=0\n",
    "method=['DecisionTree','K-NN']\n",
    "cls=[DTree,KNN]\n",
    "while i<=1:\n",
    "    print(method[i])\n",
    "    print(cls_rep(y_test, run_clf(X_train,X_test,y_train,cls[i]),target_names=target_names))\n",
    "    i+=1\n",
    "print('Randomforest')\n",
    "print(cls_rep(y_test, run_RF(X_train,X_test,y_train,RF),target_names=target_names))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Generally, we use accuracy to evaluate them. In this case, we focuse more on finding 'at-risk' students Here, as we can see above, Our datasets are balanced, therefore we could evaluate the performance of the classifiers with more than â€˜accuracyâ€™ and â€˜recallâ€™. AUC and RUC curve are good for balanced datasets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training data: at-risk students: 959 not at-risk students: 787\n",
      "testing data: at-risk students: 883 at-risk students: 717\n"
     ]
    }
   ],
   "source": [
    "print(\"training data:\",\"at-risk students:\",np.count_nonzero(y_train == 1),\"not at-risk students:\",np.count_nonzero(y_train == 0))\n",
    "print(\"testing data:\",\"at-risk students:\",np.count_nonzero(y_test == 1),\"at-risk students:\",np.count_nonzero(y_test == 0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import roc_curve,auc\n",
    "# Compute ROC curve and ROC area for each class\n",
    "\n",
    "\n",
    "def acu_curve(y_test,y_pred,cls_me,color):\n",
    "    fpr, tpr, thresholds  =  roc_curve(y_test, y_pred) #fpr and tpr\n",
    "    roc_auc =auc(fpr, tpr) # auc\n",
    "    lw = 2\n",
    "    plt.plot(fpr, tpr, color=color,\n",
    "             lw=lw, label='ROC curve of {} '.format(cls_me)+'(area = %0.3f)' % roc_auc) ###x-axis: fprï¼Œy-axis:tpr\n",
    "    plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n",
    "    ax.set_xlim([0.0, 1.0])\n",
    "    ax.set_ylim([0.0, 1.0])\n",
    "    ax.set_xlabel('False Positive Rate')\n",
    "    ax.set_xlabel('True Positive Rate')\n",
    "    ax.set_title('RUC curve of different classification methods')\n",
    "    ax.legend(loc=\"lower right\")\n",
    "    \n",
    "\n",
    "fig, ax = plt.subplots(figsize = (10, 10))\n",
    "acu_curve(y_test, run_clf(X_train,X_test,y_train,DTree),'DecisionTree','gold')\n",
    "acu_curve(y_test, run_clf(X_train,X_test,y_train,KNN),'K-NN','darkorange')\n",
    "acu_curve(y_test, run_RF(X_train,X_test,y_train,RF),'RandomForest','purple')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's now move on to next sections to optimize our prediction models."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.2 Prediction models based on Demographic Data, Assessment Data, and VLE data\n",
    "We got the prediction model based on `stu_demo_BB` in 3.1, but the report shows that demographic data is not sufficient to predict.<br/>\n",
    "\n",
    "With the emerging technology, sophisticated database systems are used to store students' data extracted from computer-based, formative assessments and trace data, so as to support the control of the learning process.[4][6]<br/>\n",
    "\n",
    "Therefore, in this section, we plan to add formative assessment data `stu_ass` and VLE data `stu_Vle` into predcition models and see whether we can make more accurate prediction models !\n",
    "\n",
    "### 3.2.1 Assessment Data\n",
    "1. `stu_ass` contains the results of studentsâ€™ assessments. If the student does not submit the assessment, no result is recorded. The final exam submissions is missing, if the result of the assessments is not stored in the system. Here are the columns we will use later:\n",
    " - id_assessment â€“ the identification number of the assessment.\n",
    " - id_student â€“ a unique identification number for the student.\n",
    " - date_submitted â€“ the date of student submission, measured as the number of days since the start of the module presentation.\n",
    " - is_banked â€“ a status flag indicating that the assessment result has been transferred from a previous presentation.<br/>\n",
    "\n",
    "\n",
    "2. `assessment` contains information about assessments in module-presentations. Usually, every presentation has a number of assessments followed by the final exam. Here are the columns we will use later:\n",
    " - id_assessment â€“ identification number of the assessment.\n",
    " - assessment_type â€“ type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).\n",
    " - date â€“ information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).\n",
    " - weight - weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.\n",
    " \n",
    "Remember in this tutorial, we only use data of BBB-2013B and BBB-2014B, therefore we need to subset `assessment` and `stu_ass` to our new assessment dataset `assess_BB`, `stu_assBB13`, and `stu_assBB14`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>code_module</th>\n",
       "      <th>code_presentation</th>\n",
       "      <th>id_assessment</th>\n",
       "      <th>assessment_type</th>\n",
       "      <th>date</th>\n",
       "      <th>weight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>14984</td>\n",
       "      <td>TMA</td>\n",
       "      <td>19.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>14985</td>\n",
       "      <td>TMA</td>\n",
       "      <td>47.0</td>\n",
       "      <td>18.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>14986</td>\n",
       "      <td>TMA</td>\n",
       "      <td>89.0</td>\n",
       "      <td>18.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>14987</td>\n",
       "      <td>TMA</td>\n",
       "      <td>124.0</td>\n",
       "      <td>18.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>14988</td>\n",
       "      <td>TMA</td>\n",
       "      <td>159.0</td>\n",
       "      <td>18.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   code_module code_presentation  id_assessment assessment_type   date  weight\n",
       "17         BBB             2013B          14984             TMA   19.0     5.0\n",
       "18         BBB             2013B          14985             TMA   47.0    18.0\n",
       "19         BBB             2013B          14986             TMA   89.0    18.0\n",
       "20         BBB             2013B          14987             TMA  124.0    18.0\n",
       "21         BBB             2013B          14988             TMA  159.0    18.0"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "assess_B=assessment.loc[assessment['code_module']=='BBB',]\n",
    "assess_BB=assess_B[(assess_B['code_presentation']=='2013B')|(assess_B['code_presentation']=='2014B')].dropna()\n",
    "assess_BB.sort_values(by=\"id_assessment\").head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can find from the form above that `id_assessment` of BBB-2013B is from 14984-14995 excluding 14990. Similiarly, `id_assessment` of BBB-2014B is from 15008-15019 excluding 15014. So we can select what we want following this pattern."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id_assessment</th>\n",
       "      <th>id_student</th>\n",
       "      <th>date_submitted</th>\n",
       "      <th>is_banked</th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3149</th>\n",
       "      <td>14984</td>\n",
       "      <td>1008675</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>70.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3150</th>\n",
       "      <td>14984</td>\n",
       "      <td>1098728</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>75.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3151</th>\n",
       "      <td>14984</td>\n",
       "      <td>1413989</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>86.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3152</th>\n",
       "      <td>14984</td>\n",
       "      <td>1436591</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>77.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3153</th>\n",
       "      <td>14984</td>\n",
       "      <td>1480800</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>77.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      id_assessment  id_student  date_submitted  is_banked  score\n",
       "3149          14984     1008675              19          0   70.0\n",
       "3150          14984     1098728              19          0   75.0\n",
       "3151          14984     1413989              30          0   86.0\n",
       "3152          14984     1436591              14          0   77.0\n",
       "3153          14984     1480800              15          0   77.0"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stu_ass_BB13=stu_ass[(stu_ass['id_assessment']>=14984)&(stu_ass['id_assessment']<=14995)].dropna()\n",
    "stu_ass_BB13=stu_ass_BB13[~stu_ass_BB13['id_assessment'].isin([14990])]\n",
    "stu_ass_BB13=stu_ass_BB13[~stu_ass_BB13['is_banked'].isin([1])]\n",
    "stu_ass_BB14=stu_ass[(stu_ass['id_assessment']>=15008)&(stu_ass['id_assessment']<=15019)].dropna()\n",
    "stu_ass_BB14=stu_ass_BB14[~stu_ass_BB14['id_assessment'].isin([15014])]\n",
    "stu_ass_BB14=stu_ass_BB14[~stu_ass_BB14['is_banked'].isin([1])]\n",
    "stu_ass_BB13.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total assessments: 11 11\n",
      "the number of assessment result transferred from a previous presentation: 0 , 0\n"
     ]
    }
   ],
   "source": [
    "print(\"total assessments:\",stu_ass_BB13[\"id_assessment\"].nunique(),stu_ass_BB14[\"id_assessment\"].nunique())\n",
    "print(\"the number of assessment result transferred from a previous presentation:\",stu_ass_BB13[\"is_banked\"].sum(),\",\",stu_ass_BB14[\"is_banked\"].sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can merge the assessment data with student' assessment record data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "ass_BB13_mg=pd.merge(stu_ass_BB13,assess_BB,how='left')\n",
    "ass_BB14_mg=pd.merge(stu_ass_BB14,assess_BB,how='left')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In reality, some students might give up doing assessments after several weeks, but their give-up behaviours are not recorded into the current OULAD assessment data. So here we need to create three new feature to show their intact assessment situations:\n",
    "- submission_rate  - students' total number of submissions\n",
    "- late_submit - students' total number of late\n",
    "- late_rate - students' total number of late/total number of submissions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id_student</th>\n",
       "      <th>submissions</th>\n",
       "      <th>submission_rate</th>\n",
       "      <th>late_submit</th>\n",
       "      <th>late_rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>23629</td>\n",
       "      <td>4</td>\n",
       "      <td>0.36</td>\n",
       "      <td>3</td>\n",
       "      <td>0.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>25107</td>\n",
       "      <td>11</td>\n",
       "      <td>1.00</td>\n",
       "      <td>6</td>\n",
       "      <td>0.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>27891</td>\n",
       "      <td>6</td>\n",
       "      <td>0.55</td>\n",
       "      <td>4</td>\n",
       "      <td>0.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>29144</td>\n",
       "      <td>9</td>\n",
       "      <td>0.82</td>\n",
       "      <td>6</td>\n",
       "      <td>0.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>31663</td>\n",
       "      <td>11</td>\n",
       "      <td>1.00</td>\n",
       "      <td>6</td>\n",
       "      <td>0.55</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id_student  submissions  submission_rate  late_submit  late_rate\n",
       "0       23629            4             0.36            3       0.75\n",
       "1       25107           11             1.00            6       0.55\n",
       "2       27891            6             0.55            4       0.67\n",
       "3       29144            9             0.82            6       0.67\n",
       "4       31663           11             1.00            6       0.55"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ass_BB13_mg[\"late_submit\"]=(ass_BB13_mg['date_submitted'] - ass_BB13_mg['date']).apply(lambda x: 1 if x >0 else 0)\n",
    "totalsub_BB13= pd.DataFrame(ass_BB13_mg.groupby([\"id_student\"]).count(),columns=[\"id_assessment\"]).rename(columns={\"id_assessment\": \"submissions\"}).reset_index()\n",
    "totalsub_BB13.loc[:, \"submission_rate\"]= totalsub_BB13[\"submissions\"]/11\n",
    "totallate_BB13= pd.DataFrame(ass_BB13_mg.groupby([\"id_student\"]).sum(axis=1),columns=[\"late_submit\"]).reset_index()\n",
    "sub_late_BB13 = pd.merge(totalsub_BB13,totallate_BB13)\n",
    "sub_late_BB13.loc[:, \"late_rate\"]= sub_late_BB13[\"late_submit\"]/sub_late_BB13[\"submissions\"]\n",
    "sub_late_BB13 = sub_late_BB13.round(2)\n",
    "sub_late_BB13.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id_student</th>\n",
       "      <th>submissions</th>\n",
       "      <th>submission_rate</th>\n",
       "      <th>late_submit</th>\n",
       "      <th>late_rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>25997</td>\n",
       "      <td>2</td>\n",
       "      <td>0.18</td>\n",
       "      <td>2</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>38941</td>\n",
       "      <td>1</td>\n",
       "      <td>0.09</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>50069</td>\n",
       "      <td>6</td>\n",
       "      <td>0.55</td>\n",
       "      <td>4</td>\n",
       "      <td>0.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>52426</td>\n",
       "      <td>5</td>\n",
       "      <td>0.45</td>\n",
       "      <td>2</td>\n",
       "      <td>0.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>55968</td>\n",
       "      <td>6</td>\n",
       "      <td>0.55</td>\n",
       "      <td>4</td>\n",
       "      <td>0.67</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id_student  submissions  submission_rate  late_submit  late_rate\n",
       "0       25997            2             0.18            2       1.00\n",
       "1       38941            1             0.09            1       1.00\n",
       "2       50069            6             0.55            4       0.67\n",
       "3       52426            5             0.45            2       0.40\n",
       "4       55968            6             0.55            4       0.67"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ass_BB14_mg[\"late_submit\"]=(ass_BB14_mg['date_submitted'] - ass_BB14_mg['date']).apply(lambda x: 1 if x >0 else 0)\n",
    "totalsub_BB14= pd.DataFrame(ass_BB14_mg.groupby([\"id_student\"]).count(),columns=[\"id_assessment\"]).rename(columns={\"id_assessment\": \"submissions\"}).reset_index()\n",
    "totalsub_BB14.loc[:, \"submission_rate\"]= totalsub_BB14[\"submissions\"]/11\n",
    "totallate_BB14= pd.DataFrame(ass_BB14_mg.groupby([\"id_student\"]).sum(axis=1),columns=[\"late_submit\"]).reset_index()\n",
    "sub_late_BB14 = pd.merge(totalsub_BB14,totallate_BB14)\n",
    "sub_late_BB14.loc[:, \"late_rate\"]= sub_late_BB14[\"late_submit\"]/sub_late_BB14[\"submissions\"]\n",
    "sub_late_BB14 = sub_late_BB14.round(2)\n",
    "sub_late_BB14.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ok! Now we have all the assessment data we need. Let's go to VLE data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.2.2 VLE Data\n",
    "\n",
    "There are two relative datasets: `stu_Vle` and `Vle`.\n",
    "1. `stu_Vle` contains information about each studentâ€™s interactions with the materials in the VLE. Here are the columns we will use later:\n",
    " - id_student â€“ a unique identification number for the student.\n",
    " - id_site - an identification number for the VLE material.\n",
    " - date â€“ the date of studentâ€™s interaction with the material measured as the number of days since the start of the module-presentation.\n",
    " - sum_click â€“ the number of times a student interacts with the material in that day.<br/>\n",
    "<br/>\n",
    "\n",
    "2. `Vle` contains information about the available materials in the VLE. Here are the columns we will use later:\n",
    " - id_site â€“ an identification number of the material.\n",
    " - activity_type â€“ the role associated with the module material.\n",
    " \n",
    "Still, we only use data of BBB-2013B and BBB-2014B, therefore we need to subset `Vle` and `stu_Vle` to our new assessment dataset `Vle_BB`, `stu_Vle13`, and `stu_Vle14`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>code_module</th>\n",
       "      <th>code_presentation</th>\n",
       "      <th>id_student</th>\n",
       "      <th>id_site</th>\n",
       "      <th>date</th>\n",
       "      <th>sum_click</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>350300</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>333129</td>\n",
       "      <td>542795</td>\n",
       "      <td>-9</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>350302</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>333129</td>\n",
       "      <td>542795</td>\n",
       "      <td>-9</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>350299</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>333129</td>\n",
       "      <td>542808</td>\n",
       "      <td>-9</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>350301</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>333129</td>\n",
       "      <td>542808</td>\n",
       "      <td>-9</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>350298</th>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>333129</td>\n",
       "      <td>542864</td>\n",
       "      <td>-9</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       code_module code_presentation  id_student  id_site  date  sum_click\n",
       "350300         BBB             2013B      333129   542795    -9          1\n",
       "350302         BBB             2013B      333129   542795    -9          1\n",
       "350299         BBB             2013B      333129   542808    -9          4\n",
       "350301         BBB             2013B      333129   542808    -9          6\n",
       "350298         BBB             2013B      333129   542864    -9          3"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stu_VleBB=stu_Vle.loc[stu_Vle['code_module']=='BBB',]\n",
    "stu_VleBB13=stu_VleBB[(stu_VleBB['code_presentation']=='2013B')].dropna()\n",
    "stu_VleBB14=stu_VleBB[(stu_VleBB['code_presentation']=='2014B')].dropna()\n",
    "stu_VleBB13.head().sort_values(\"id_site\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id_site</th>\n",
       "      <th>code_module</th>\n",
       "      <th>code_presentation</th>\n",
       "      <th>activity_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>414</th>\n",
       "      <td>542803</td>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>forumng</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>416</th>\n",
       "      <td>543040</td>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>subpage</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>415</th>\n",
       "      <td>543170</td>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>resource</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>417</th>\n",
       "      <td>543202</td>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>resource</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>413</th>\n",
       "      <td>543306</td>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>resource</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     id_site code_module code_presentation activity_type\n",
       "414   542803         BBB             2013B       forumng\n",
       "416   543040         BBB             2013B       subpage\n",
       "415   543170         BBB             2013B      resource\n",
       "417   543202         BBB             2013B      resource\n",
       "413   543306         BBB             2013B      resource"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "VleBB=Vle.loc[Vle['code_module']=='BBB',]\n",
    "VleBB=VleBB[(VleBB['code_presentation']=='2013B')|(VleBB['code_presentation']=='2014B')][['id_site','code_module','code_presentation','activity_type']]\n",
    "VleBB.head().sort_values(\"id_site\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "Vle_BB13_mg=pd.merge(stu_VleBB13,VleBB,how='left')\n",
    "Vle_BB14_mg=pd.merge(stu_VleBB14,VleBB,how='left')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.2.3 Weekly Prediction Model\n",
    "This part we just follow the Methodology part of [7].<br/>\n",
    "Based on the student assessment data and Vle data,the dataset is further divided into 30 sub-datasets, which divide the dataset into weekly times. Following equation shows how we get the dataset for week number n.\n",
    "$$w(n) =  \\sum_{i=0}^{n}{W_i}$$\n",
    "So, for example, the week-5 dataset can be defined as:\n",
    "$$w_5 = {w_0}+{w_1}+{w_2}+{w_3}+{w_4}+{w_5}$$\n",
    "\n",
    "This time, the predictor features for the weekly prediction model are below:\n",
    "1. count of each online activities done that period of time - need to create 10 new features\n",
    "2. assessment scores (if available at that time).\n",
    "3. assessment weight\n",
    "4. late_submit - whether the date_submitted after the due of that specific assessment"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For VLE data, we need to create sum click for each different activity weekly as below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['homepage', 'forumng', 'subpage', 'oucontent', 'resource', 'quiz',\n",
       "       'url', 'glossary', 'ouelluminate', 'sharedsubpage'], dtype=object)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Vle_BB13_mg['activity_type'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First of all, we need to create a column `week_number` to show the week number of every `sum_click`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "lst=[Vle_BB13_mg,Vle_BB14_mg]\n",
    "for i in lst:\n",
    "    i.loc[:,'week_number']=(i['date']//7)+1\n",
    "    i.loc[i['week_number'] < 0,'week_number']= 0\n",
    "    i.loc[i['week_number'] > 28,'week_number']= 29"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then, we can use `.pivot_table`  to know sum of click for every activity_type in every week.<br/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Row numbers in Vle_BB13_mg: 403266\n",
      "NaNs in Vle_BB13_type: activity_type\n",
      "forumng           6653\n",
      "glossary         25976\n",
      "homepage           361\n",
      "oucontent        25868\n",
      "ouelluminate     26127\n",
      "quiz             18023\n",
      "resource         16608\n",
      "sharedsubpage    26802\n",
      "subpage          13028\n",
      "url              18958\n",
      "dtype: int64\n",
      "Row numbers in Vle_BB14_mg: 273236\n",
      "NaNs in Vle_BB14_type: activity_type\n",
      "forumng           8247\n",
      "glossary         20752\n",
      "homepage           417\n",
      "oucollaborate    20879\n",
      "oucontent        17170\n",
      "quiz             13820\n",
      "resource         13332\n",
      "sharedsubpage    21144\n",
      "subpage          10660\n",
      "url              12099\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "Vle_BB13_type = Vle_BB13_mg.pivot_table(values='sum_click', index=['id_student', 'week_number'],\n",
    "                   columns=['activity_type'], aggfunc=np.sum)\n",
    "Vle_BB13_type.isna().sum() \n",
    "Vle_BB14_type = Vle_BB14_mg.pivot_table(values='sum_click', index=['id_student', 'week_number'],\n",
    "                   columns=['activity_type'], aggfunc=np.sum)\n",
    "print(\"Row numbers in Vle_BB13_mg:\",Vle_BB13_mg.shape[0])\n",
    "print(\"NaNs in Vle_BB13_type:\",Vle_BB13_type.isna().sum())\n",
    "print(\"Row numbers in Vle_BB14_mg:\",Vle_BB14_mg.shape[0])\n",
    "print(\"NaNs in Vle_BB14_type:\",Vle_BB14_type.isna().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After building the pivot table, you can inspect that there are many NaNs in some click activities. By using `.isna().sum()` to get the sum and compare it with the toal number, we can remove some useless features and only keep useful one. Then the NaNs means the students has no click of that activity in that week, so we use `.fillna(0)` to fill in them and change indexes to columns by using `.reset_index()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "Vle_BB13_type = Vle_BB13_type[['forumng','homepage','quiz','resource','subpage','url']].fillna(0).reset_index(level=['id_student','week_number'])\n",
    "Vle_BB14_type = Vle_BB14_type[['forumng','homepage','quiz','resource','subpage','url']].fillna(0).reset_index(level=['id_student','week_number'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alright, now that we got all the assessment and VLE data we need for our weekly production models, let's build our prediction models now!\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id_student</th>\n",
       "      <th>submissions</th>\n",
       "      <th>submission_rate</th>\n",
       "      <th>late_submit</th>\n",
       "      <th>late_rate</th>\n",
       "      <th>code_module</th>\n",
       "      <th>code_presentation</th>\n",
       "      <th>gender</th>\n",
       "      <th>region</th>\n",
       "      <th>highest_education</th>\n",
       "      <th>imd_band</th>\n",
       "      <th>age_band</th>\n",
       "      <th>num_of_prev_attempts</th>\n",
       "      <th>studied_credits</th>\n",
       "      <th>disability</th>\n",
       "      <th>final_result</th>\n",
       "      <th>pass_not</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>23629</td>\n",
       "      <td>4</td>\n",
       "      <td>0.36</td>\n",
       "      <td>3</td>\n",
       "      <td>0.75</td>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>Fail</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>25107</td>\n",
       "      <td>11</td>\n",
       "      <td>1.00</td>\n",
       "      <td>6</td>\n",
       "      <td>0.55</td>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>120</td>\n",
       "      <td>0</td>\n",
       "      <td>Pass</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>27891</td>\n",
       "      <td>6</td>\n",
       "      <td>0.55</td>\n",
       "      <td>4</td>\n",
       "      <td>0.67</td>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>120</td>\n",
       "      <td>1</td>\n",
       "      <td>Withdrawn</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>29144</td>\n",
       "      <td>9</td>\n",
       "      <td>0.82</td>\n",
       "      <td>6</td>\n",
       "      <td>0.67</td>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>120</td>\n",
       "      <td>0</td>\n",
       "      <td>Fail</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>31663</td>\n",
       "      <td>11</td>\n",
       "      <td>1.00</td>\n",
       "      <td>6</td>\n",
       "      <td>0.55</td>\n",
       "      <td>BBB</td>\n",
       "      <td>2013B</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>Pass</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id_student  submissions  submission_rate  late_submit  late_rate  \\\n",
       "0       23629            4             0.36            3       0.75   \n",
       "1       25107           11             1.00            6       0.55   \n",
       "2       27891            6             0.55            4       0.67   \n",
       "3       29144            9             0.82            6       0.67   \n",
       "4       31663           11             1.00            6       0.55   \n",
       "\n",
       "  code_module code_presentation  gender  region  highest_education  imd_band  \\\n",
       "0         BBB             2013B       0       0                  1         0   \n",
       "1         BBB             2013B       0       0                  1         0   \n",
       "2         BBB             2013B       1       6                  1         1   \n",
       "3         BBB             2013B       1       8                  1         6   \n",
       "4         BBB             2013B       1       4                  2         3   \n",
       "\n",
       "   age_band  num_of_prev_attempts  studied_credits  disability final_result  \\\n",
       "0         0                     2               60           0         Fail   \n",
       "1         0                     0              120           0         Pass   \n",
       "2         0                     2              120           1    Withdrawn   \n",
       "3         0                     0              120           0         Fail   \n",
       "4         1                     0               60           0         Pass   \n",
       "\n",
       "   pass_not  \n",
       "0         1  \n",
       "1         0  \n",
       "2         1  \n",
       "3         1  \n",
       "4         0  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "demo_ass_2013 = pd.merge(sub_late_BB13,stu_demo_BB.loc[stu_demo['code_presentation']=='2013B',])\n",
    "demo_ass_2014 = pd.merge(sub_late_BB14,stu_demo_BB.loc[stu_demo['code_presentation']=='2014B',])\n",
    "demo_ass_2013.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "i=0\n",
    "result=[]\n",
    "from sklearn.metrics import recall_score\n",
    "for i in range(0,30):\n",
    "    weekly_13 = Vle_BB13_type[(Vle_BB13_type['week_number']<=i)].groupby(['id_student']).sum(axis=1).reset_index(level=['id_student'])\n",
    "    weekly_14 = Vle_BB14_type[(Vle_BB14_type['week_number']<=i)].groupby(['id_student']).sum(axis=1).reset_index(level=['id_student'])\n",
    "    click_demo_13B = pd.merge(weekly_13,demo_ass_2013)\n",
    "    click_demo_14B = pd.merge(weekly_14,demo_ass_2014)\n",
    "    X_train = click_demo_13B[['gender','region','highest_education','imd_band','age_band','num_of_prev_attempts','studied_credits','disability',\n",
    "                            'forumng','homepage','quiz','resource','subpage','url','submission_rate','late_rate']].values\n",
    "    X_test = click_demo_14B[['gender','region','highest_education','imd_band','age_band','num_of_prev_attempts','studied_credits','disability',\n",
    "                            'forumng','homepage','quiz','resource','subpage','url','submission_rate','late_rate']].values\n",
    "    y_train = click_demo_13B[['pass_not']].values.ravel()\n",
    "    y_test = click_demo_14B[['pass_not']].values.ravel()\n",
    "    j=0\n",
    "    while j<=1:\n",
    "        week=\"week-{}\".format(i)\n",
    "        recall_cell=[week,method[j],(recall_score(y_test, run_clf(X_train,X_test,y_train,cls[j])))]\n",
    "        result.append(recall_cell)\n",
    "        j+=1\n",
    "    recall_cell=[week,'Randomforest',(recall_score(y_test, run_RF(X_train,X_test,y_train,RF)))]\n",
    "    result.append(recall_cell)\n",
    "    i+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['week-0', 'DecisionTree', 0.8087248322147651] ['week-29', 'Randomforest', 0.8100436681222707]\n"
     ]
    }
   ],
   "source": [
    "print(result[0],result[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>week_number</th>\n",
       "      <th>Method</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Before-Term</td>\n",
       "      <td>DecisionTree</td>\n",
       "      <td>0.808725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Before-Term</td>\n",
       "      <td>K-NN</td>\n",
       "      <td>0.379195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Before-Term</td>\n",
       "      <td>Randomforest</td>\n",
       "      <td>0.785235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>week-1</td>\n",
       "      <td>DecisionTree</td>\n",
       "      <td>0.780679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>week-1</td>\n",
       "      <td>K-NN</td>\n",
       "      <td>0.467363</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   week_number        Method    Recall\n",
       "0  Before-Term  DecisionTree  0.808725\n",
       "1  Before-Term          K-NN  0.379195\n",
       "2  Before-Term  Randomforest  0.785235\n",
       "3       week-1  DecisionTree  0.780679\n",
       "4       week-1          K-NN  0.467363"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_plot=pd.DataFrame(result,columns =['week_number','Method','Recall'])\n",
    "result_plot.loc[result_plot['week_number'] == 'week-29','week_number']= \"After-Term\"\n",
    "result_plot.loc[result_plot['week_number'] == 'week-0','week_number']= \"Before-Term\"\n",
    "result_plot.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x11d29f0b8>"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2592x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize = (36, 6))\n",
    "labels=result_plot['week_number'].unique()\n",
    "x = np.arange(len(labels))\n",
    "Recall_tree=np.array(result_plot[(result_plot['Method']=='DecisionTree')]['Recall'])\n",
    "Recall_knn=np.array(result_plot[(result_plot['Method']=='K-NN')]['Recall'])\n",
    "Recall_rf=np.array(result_plot[(result_plot['Method']=='Randomforest')]['Recall'])\n",
    "ax.set_ylabel('Recall',fontsize=20)\n",
    "ax.set_title(\"Prediction of performance using VLE and Assessment Data\",fontsize=24)\n",
    "ax.set_xticks(x)\n",
    "ax.set_xticklabels(labels)\n",
    "ax.tick_params(axis=\"x\", labelsize=12)\n",
    "ax.tick_params(axis=\"y\", labelsize=18)\n",
    "rects1 = ax.plot(x , Recall_tree, label='DecisionTree',marker='o')\n",
    "rects2 = ax.plot(x, Recall_knn, label='K-NN',marker='*')\n",
    "rects3 = ax.plot(x, Recall_rf, label='Randomforest',marker='x')\n",
    "ax.legend(loc='upper right')    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is the summary graph of maximum Recall-score achieved by classifier for each weekly prediction model. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x12410be10>"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2520x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "max_recall=result_plot.loc[result_plot.groupby('week_number').idxmax()[\"Recall\"]].sort_index()\n",
    "d={\"DecisionTree\":\"tree\",\"Randomforest\":\"RF\",\"K-NN\":\"knn\"}\n",
    "max_recall.loc[:,'Method'] = max_recall['Method'].map(d)\n",
    "fig, ax = plt.subplots(figsize = (36, 6))\n",
    "labels=max_recall['week_number'].unique()\n",
    "x = np.arange(len(labels))\n",
    "Recall=np.array(max_recall['Recall'])\n",
    "ax.set_ylabel('Recall',fontsize=24)\n",
    "ax.set_title(\"Maximum Recall-score for each weekly prediction model\",fontsize=20)\n",
    "ax.set_xticks(x)\n",
    "ax.set_xticklabels(labels)\n",
    "ax.tick_params(axis=\"x\", labelsize=12)\n",
    "ax.tick_params(axis=\"y\", labelsize=15)\n",
    "rects1 = ax.plot(x , Recall, label='DecisionTree',marker='o')\n",
    "for a,b,c in zip(x,max_recall['Recall'],max_recall['Method']):\n",
    "    ax.text(a, b,c, fontsize=20)\n",
    "ax.legend(loc='upper left')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Well done! "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By and large,"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Reference\n",
    "[1] Doug Clow. An overview of learning analytics. Teaching in Higher Education, September 2013.<br/>\n",
    "[2] S Nunn, J T Avella, and T Kanai. Learning analytics methods, benefits, and challenges in higher education: A systematic literature review. Online .. ., 2016.\n",
    "[3] OULAD Dataset description: https://analyse.kmi.open.ac.uk/open_dataset#description <br/>\n",
    "[4] Tempelaar, D. T., Heck, A., Cuypers, H., van der Kooij, H., & van de Vrie, E. (2013, April). Formative assessment and learning analytics. In Proceedings of the third international conference on learning analytics and knowledge (pp. 205-209). ACM.\n",
    "[5] Costa, E. B., Fonseca, B., Santana, M. A., de AraÃºjo, F. F., & Rego, J. (2017). Evaluating the effectiveness of educational data mining techniques for early prediction of students' academic failure in introductory programming courses. Computers in Human Behavior, 73, 247-256.\n",
    "[6] C. a. V. S. a. E. P. G. a. H. C. Romero, \"Data mining algorithms to classify students,\" in Educational data mining , 2008.\n",
    "[7] Umer, R., Mathrani, A., Susnjak, T., & Lim, S. (2019, March). Mining Activity Log Data to Predict Student's Outcome in a Course. In Proceedings of the 2019 International Conference on Big Data and Education (pp. 52-58). ACM."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
